from .occ_impl.geom import Vector as Vector
from .occ_impl.shapes import Edge as Edge, Wire as Wire
from typing import Any, Iterable, List, Tuple

Arcs: Any
Points: Any
Entity: Any
Hull: Any

class Point:
    x: float
    y: float
    def __init__(self, x: float, y: float) -> None: ...
    def __hash__(self): ...
    def __eq__(self, other): ...

class Segment:
    a: Point
    b: Point
    def __init__(self, a: Point, b: Point) -> None: ...

class Arc:
    c: Point
    s: Point
    e: Point
    r: float
    a1: float
    a2: float
    ac: float
    def __init__(self, c: Point, r: float, a1: float, a2: float) -> None: ...

def atan2p(x, y): ...
def convert_and_validate(edges: Iterable[Edge]) -> Tuple[List[Arc], List[Point]]: ...
def select_lowest_point(points: Points) -> Tuple[Point, int]: ...
def select_lowest_arc(arcs: Arcs) -> Tuple[Point, Arc]: ...
def select_lowest(arcs: Arcs, points: Points) -> Entity: ...
def pt_pt(p1: Point, p2: Point) -> Tuple[float, Segment]: ...
def pt_arc(p: Point, a: Arc) -> Tuple[float, Segment]: ...
def arc_pt(a: Arc, p: Point) -> Tuple[float, Segment]: ...
def arc_arc(a1: Arc, a2: Arc) -> Tuple[float, Segment]: ...
def get_angle(current: Entity, e: Entity) -> Tuple[float, Segment]: ...
def update_hull(current_e: Entity, ix: int, entities: List[Entity], angles: List[float], segments: List[Segment], hull: Hull) -> Tuple[Entity, float, bool]: ...
def finalize_hull(hull: Hull) -> Wire: ...
def find_hull(edges: Iterable[Edge]) -> Wire: ...
