from .exporters.vtk import toString as toString
from .geom import Location as Location
from .shapes import Compound as Compound, Shape as Shape
from OCP.Quantity import Quantity_ColorRGBA
from OCP.TDF import TDF_Label as TDF_Label
from OCP.TDocStd import TDocStd_Document
from typing import Any, Dict, Iterable, List, Optional, Tuple, overload
from typing_extensions import Protocol as Protocol
from vtkmodules.vtkRenderingCore import vtkRenderer

class Color:
    wrapped: Quantity_ColorRGBA
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, r: float, g: float, b: float, a: float = ...) -> None: ...
    def toTuple(self) -> Tuple[float, float, float, float]: ...

class AssemblyProtocol:
    @property
    def loc(self) -> Location: ...
    @property
    def name(self) -> str: ...
    @property
    def parent(self) -> Optional['AssemblyProtocol']: ...
    @property
    def color(self) -> Optional[Color]: ...
    @property
    def shapes(self) -> Iterable[Shape]: ...
    @property
    def children(self) -> Iterable['AssemblyProtocol']: ...
    def traverse(self) -> Iterable[Tuple[str, 'AssemblyProtocol']]: ...

def setName(l: TDF_Label, name: str, tool): ...
def setColor(l: TDF_Label, color: Color, tool): ...
def toCAF(assy: AssemblyProtocol, coloredSTEP: bool = ...) -> Tuple[TDF_Label, TDocStd_Document]: ...
def toVTK(assy: AssemblyProtocol, renderer: vtkRenderer = ..., loc: Location = ..., color: Tuple[float, float, float, float] = ..., tolerance: float = ...) -> vtkRenderer: ...
def toJSON(assy: AssemblyProtocol, loc: Location = ..., color: Tuple[float, float, float, float] = ..., tolerance: float = ...) -> List[Dict[str, Any]]: ...
