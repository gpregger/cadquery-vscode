import abc
from .occ_impl.geom import Vector as Vector
from .occ_impl.shapes import Edge as Edge, Face as Face, Shape as Shape, Shell as Shell, Solid as Solid, Wire as Wire, geom_LUT_EDGE as geom_LUT_EDGE, geom_LUT_FACE as geom_LUT_FACE
from abc import ABC, abstractmethod
from pyparsing import CaselessLiteral as CaselessLiteral, Forward as Forward, Keyword as Keyword, ZeroOrMore as ZeroOrMore
from typing import Any, List, Sequence

class Selector:
    def filter(self, objectList): ...
    def __and__(self, other): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __neg__(self): ...

class NearestToPointSelector(Selector):
    pnt: Any
    def __init__(self, pnt) -> None: ...
    def filter(self, objectList): ...

class BoxSelector(Selector):
    p0: Any
    p1: Any
    test_boundingbox: Any
    def __init__(self, point0, point1, boundingbox: bool = ...) -> None: ...
    def filter(self, objectList): ...

class BaseDirSelector(Selector):
    direction: Any
    tolerance: Any
    def __init__(self, vector: Vector, tolerance: float = ...) -> None: ...
    def test(self, vec: Vector) -> bool: ...
    def filter(self, objectList: Sequence[Shape]) -> List[Shape]: ...

class ParallelDirSelector(BaseDirSelector):
    def test(self, vec: Vector) -> bool: ...

class DirectionSelector(BaseDirSelector):
    def test(self, vec: Vector) -> bool: ...

class PerpendicularDirSelector(BaseDirSelector):
    def test(self, vec: Vector) -> bool: ...

class TypeSelector(Selector):
    typeString: Any
    def __init__(self, typeString: str) -> None: ...
    def filter(self, objectList: Sequence[Shape]) -> List[Shape]: ...

class _NthSelector(Selector, ABC, metaclass=abc.ABCMeta):
    n: Any
    directionMax: Any
    tolerance: Any
    def __init__(self, n: int, directionMax: bool = ..., tolerance: float = ...) -> None: ...
    def filter(self, objectlist: Sequence[Shape]) -> List[Shape]: ...
    @abstractmethod
    def key(self, obj: Shape) -> float: ...
    def cluster(self, objectlist: Sequence[Shape]) -> List[List[Shape]]: ...

class RadiusNthSelector(_NthSelector):
    def key(self, obj: Shape) -> float: ...

class CenterNthSelector(_NthSelector):
    direction: Any
    def __init__(self, vector: Vector, n: int, directionMax: bool = ..., tolerance: float = ...) -> None: ...
    def key(self, obj: Shape) -> float: ...

class DirectionMinMaxSelector(CenterNthSelector):
    def __init__(self, vector: Vector, directionMax: bool = ..., tolerance: float = ...) -> None: ...

class DirectionNthSelector(ParallelDirSelector, CenterNthSelector):
    def __init__(self, vector: Vector, n: int, directionMax: bool = ..., tolerance: float = ...) -> None: ...
    def filter(self, objectlist: Sequence[Shape]) -> List[Shape]: ...

class LengthNthSelector(_NthSelector):
    def key(self, obj: Shape) -> float: ...

class AreaNthSelector(_NthSelector):
    def key(self, obj: Shape) -> float: ...

class BinarySelector(Selector):
    left: Any
    right: Any
    def __init__(self, left, right) -> None: ...
    def filter(self, objectList): ...
    def filterResults(self, r_left, r_right) -> None: ...

class AndSelector(BinarySelector):
    def filterResults(self, r_left, r_right): ...

class SumSelector(BinarySelector):
    def filterResults(self, r_left, r_right): ...

class SubtractSelector(BinarySelector):
    def filterResults(self, r_left, r_right): ...

class InverseSelector(Selector):
    selector: Any
    def __init__(self, selector) -> None: ...
    def filter(self, objectList): ...

class _SimpleStringSyntaxSelector(Selector):
    axes: Any
    namedViews: Any
    operatorMinMax: Any
    operator: Any
    parseResults: Any
    mySelector: Any
    def __init__(self, parseResults): ...
    def filter(self, objectList): ...

class StringSyntaxSelector(Selector):
    selectorString: Any
    mySelector: Any
    def __init__(self, selectorString) -> None: ...
    def filter(self, objectList): ...
